library(tidyverse)
library(rstan)
library(here)

here::i_am("R/101_model_both_waves.R")

### Get in wave 1 data
### In wave 1, MP A is much more left-wing translates to a dv of 1
### In wave 2, MP A is much more economically conservative translates to a dv of 1
### So we need to flip the scale for wave 1
w1 <- readRDS(here::here("../pairwise_mps/working/",
                         "tidied_data.rds"))

w1 <- w1 |>
    mutate(dv = case_when(dv == 5 ~ 1,
                          dv == 4 ~ 2,
                          dv == 3 ~ 3,
                          dv == 2 ~ 4,
                          dv == 1 ~ 5))

### Add on the wikidata identifier
w1_aux <- read.csv(here::here("data",
                           "previous_exercise_with_wikidata_idents.csv"))

w1 <- left_join(w1,
                w1_aux |> dplyr::select(Person.ID, wikidata),
                by = join_by(Person.ID.A == Person.ID))
                
w1 <- left_join(w1,
                w1_aux |> dplyr::select(Person.ID, wikidata),
                by = join_by(Person.ID.B == Person.ID),
                suffix = c(".A", ".B"))

### Get in wave 2 data
### Read in the data
p1 <- readRDS(here::here("working", "p1_tidy_data.rds"))
p2 <- readRDS(here::here("working", "p2_tidy_data.rds"))
p1$dim <- "econ"
p2$dim <- "cult"

w2 <- bind_rows(p1, p2)

### Add on the wikidata identifier
w2_aux <- read.csv(here::here("data", "canonical_representation.csv")) |>
    mutate(DisplayName = paste0(Name, " (", Constituency, ")"))

w2 <- left_join(w2,
                w2_aux |> dplyr::select(DisplayName, wikidata = wikidata_id),
                by = join_by(MP_A == DisplayName))

w2 <- left_join(w2,
                w2_aux |> dplyr::select(DisplayName, wikidata = wikidata_id),
                by = join_by(MP_B == DisplayName),
                suffix = c(".A", ".B"))

### Combine the two data-sets
w1$wave <- 1
w2$wave <- 2
w1$dim <- "econ"

dat <- full_join(w1 |> dplyr::select(wikidata.A, wikidata.B,
                                     dv, dim, wave),
                 w2 |> dplyr::select(wikidata.A, wikidata.B,
                                     dv, dim, wave),
                 by = join_by(wikidata.A, wikidata.B, dv, dim, wave))

mp_levels <- c(as.character(dat$wikidata.A),
               as.character(dat$wikidata.B))
mp_levels <- sort(unique(mp_levels))

### What is the corresponding party for each MP?
aux <- full_join(w1_aux, w2_aux,
                 by = join_by(Name, Constituency, Party)) |>
    mutate(Party = dplyr::recode(Party,
                                 "Conservative" = "Con",
                                 "Labour" = "Lab",
                                 "Liberal Democrat" = "LD",
                                 "Plaid Cymru" = "PC",
                                 "Scottish National Party" = "SNP")) |>
    mutate(wikidata = ifelse(!is.na(wikidata),
                             wikidata,
                             wikidata_id)) |>
    dplyr::select(wikidata, Party) |>
    distinct()

mp <- match(mp_levels, aux$wikidata)
if (any(mp == 0)) {
    stop("Match problem")
}
if (any(is.na(mp))) {
    stop("Match problem")
}

mp_party <- aux$Party[mp]

dat <- dat |>
    mutate(wikidata.A = factor(wikidata.A,
                               levels = mp_levels,
                               ordered = TRUE),
           wikidata.B = factor(wikidata.B,
                               levels = mp_levels,
                               ordered = TRUE),
           MP_A.num = as.numeric(wikidata.A),
           MP_B.num = as.numeric(wikidata.B),
           dim.num = ifelse(dim == "econ", 1, 2))
           
data_list <- list(N = nrow(dat),
                  Y = dat$dv,
                  K = 5,
                  idx_dim = dat$dim.num,
                  N_MPs = length(mp_levels),
                  idx_a = dat$MP_A.num,
                  idx_b = dat$MP_B.num,
                  N_parties = n_distinct(mp_party),
                  mp_party = as.numeric(factor(mp_party)),
                  mp_is_lab = as.numeric(mp_party == "Lab"),
                  mp_is_libdem = as.numeric(mp_party == "LD"),
                  mp_is_plaid = as.numeric(mp_party == "PC"),
                  mp_is_snp = as.numeric(mp_party == "SNP"),
                  mp_is_green = as.numeric(mp_party == "Green"),
                  prior_only = 0)


### Estimate the model
stan_code <- "
data {
  int<lower=1> N;             // Number of observations
  int<lower=1> K;             // Number of ordinal categories
  array[N] int<lower=1,upper=K> Y;  // response variable
  int<lower=1> N_MPs;
  int<lower=1> N_parties;
  array[N] int<lower=1, upper=2> idx_dim;
  array[N] int<lower=1, upper=N_MPs> idx_a; // link responses to MPs
  array[N] int<lower=1, upper=N_MPs> idx_b; // link responses to MPs
  array[N_MPs] int<lower=1, upper=N_parties> mp_party;
  // series of dummy variables (Con = ref. cat.)
  array[N_MPs] int<lower=0, upper=1> mp_is_lab;
  array[N_MPs] int<lower=0, upper=1> mp_is_libdem;
  array[N_MPs] int<lower=0, upper=1> mp_is_snp;
  array[N_MPs] int<lower=0, upper=1> mp_is_plaid;
  array[N_MPs] int<lower=0, upper=1> mp_is_green;
}

parameters {
  // explanatory factors
  array[N_MPs] vector[2] alpha;  // (residual) latent trait, or intercept
  matrix[2, 5] party_fx;
  cholesky_factor_corr[2] L_Omega;
  vector<lower=0>[2] L_sigma;


  // ordinal response parameters
  real c0; // initial threshold
  real<lower=0>skip1; 
  real<lower=0>skip2;
}
transformed parameters {
  matrix[2, N_MPs] theta;
  ordered[K - 1] c;

  // ordinal response transforms
  c[1] = c0;
  c[2] = c0 + skip1;
  c[3] = c[2] + skip2;
  c[4] = c[3] + skip1;

  // explanatory factor transforms
  for (l in 1:N_MPs) {
     for (d in 1:2) { 
     theta[d, l] = alpha[l][d] +
       party_fx[d, 1] * mp_is_lab[l] +
       party_fx[d, 2] * mp_is_snp[l] +
       party_fx[d, 3] * mp_is_libdem[l] +
       party_fx[d, 4] * mp_is_plaid[l] +
       party_fx[d, 5] * mp_is_green[l];
      }
  }
}

model {
  // set up the linear predictor
  // has to be at the top of the block
  vector[N] mu = rep_vector(0.0, N);
  // sigma construction
  matrix[2, 2] L_Sigma;
  L_Sigma = diag_pre_multiply(L_sigma, L_Omega);

  // Prior model

  // prior on correlations and latent sizes
  L_Omega ~ lkj_corr_cholesky(4);
  L_sigma ~ cauchy(0, 2.5);

  alpha ~ multi_normal_cholesky(rep_vector(0.0, 2), L_Sigma);
  c0 ~ normal(-1, 1);
  skip1 ~ std_normal();
  skip2 ~ std_normal();
  to_vector(party_fx) ~ normal(0, 2.5);

  // Observational model
  for (n in 1:N) {
    mu[n] = theta[idx_dim[n], idx_a[n]] - theta[idx_dim[n], idx_b[n]];
  }

  // outcome
  Y ~ ordered_logistic(mu, c);
}

generated quantities {
  array[N] int<lower=1, upper=K> Y_ppc;

  // create a counter for the number of correct predictions
  int correct_pred = 0;
  real pcp;
  
  for (n in 1:N) {
    real mu = theta[idx_dim[n], idx_a[n]] - theta[idx_dim[n], idx_b[n]];
    Y_ppc[n] = ordered_logistic_rng(mu, c);
    // increment the counter holding correct preds
    correct_pred += (Y_ppc[n] == Y[n]);
  }

  // calculate percentage correctly predicted
  // multiply by 1.0 to promote from int to real
  pcp = (correct_pred * 1.0) / (N * 1.0);

}
"

writeLines(stan_code, con = here::here("working", "bothwaves.stan"))

fit <- stan(file = here::here("working", "bothwaves.stan"),
            data = data_list,
            seed = 123,
            chains = 4,
            cores = 4,
            control = list(adapt_delta = 0.95,
                           max_treedepth = 14),
            refresh = 250 # print update every 250 iters
            )

saveRDS(fit, file = here::here("working", "bothwaves_fit.rds"))

### Tidy the outputs
theta <- rstan::extract(fit, "theta")[[1]] |>
    as.data.frame() |>
    rownames_to_column("iter") |>
    pivot_longer(cols = -c(iter)) |>
    mutate(dimension = as.numeric(sub("\\..*", "", name)),
           mp_idx = as.numeric(sub(".*\\.", "", name)))

### Add on wikidata
theta$wikidata <- mp_levels[theta$mp_idx]
theta$party <- mp_party[theta$mp_idx]

theta <- theta |>
    mutate_if(is.character, factor)

plot_df <- theta |>
    pivot_wider(id_cols = c(wikidata, party),
                names_from = dimension,
                values_from = value,
                values_fn = mean) |>
    group_by(wikidata, party) |>
    summarize(dim1 = mean(`1`),
              dim2 = mean(`2`))

cor(plot_df$dim1, plot_df$dim2)
gb_parties <- c("Con", "Green",
                "Lab", "LD", "PC", "RUK", "SNP")

plot_df$econ_rank <- rank(plot_df$dim1)

## Wes Streeting
plot_df[grepl("Q7983764", plot_df$wikidata),]
## Jeremy Corbyn
plot_df[grepl("Q291169", plot_df$wikidata),]
## Suella Braverman
plot_df[grepl("Q19957769", plot_df$wikidata),]

ggplot(plot_df |> filter(party %in% gb_parties), aes(x = dim1, y = dim2)) +
    geom_point(aes(colour = party, shape = party)) +
    geom_smooth(se = FALSE) + 
    theme_bw()

